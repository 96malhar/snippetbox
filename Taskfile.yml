version: '3'

dotenv: ['.env']

tasks:
  postgres:start:
    desc: Start a Postgres server via docker compose
    cmds:
      - docker compose up -d

  postgres:stop:
    desc: Stops Postgres server via docker compose
    cmds:
      - docker compose down

  db:setup:
    desc: Setup the database and the database user used by the snippetbox app
    cmds:
      - go run ./cmd/db setup

  db:teardown:
    desc: Teardown the database and the database user used by the snippetbox app
    cmds:
      - go run ./cmd/db teardown

  db:migrations:new:
    desc: Creates a new migration file
    cmds:
      - echo "Creating migration files for {{.CLI_ARGS}}..."
      - migrate create -seq -ext=.sql -dir=./migrations {{.CLI_ARGS}}

  db:migrations:up:
    desc: Runs up migrations
    cmds:
      - echo "Running up migrations..."
      - migrate -path ./migrations -database ${SNIPPETBOX_DB_DSN} up

  db:migrations:down:
    desc: Runs down migrations
    cmds:
      - echo "Running down migrations..."
      - migrate -path ./migrations -database ${SNIPPETBOX_DB_DSN} down

  tls-cert:generate:
    dir: ./tls
    desc: Generates TLS certificate to run Snippetbox on HTTPS
    cmds:
      - go run {{.GOROOT}}/src/crypto/tls/generate_cert.go --rsa-bits=2048 --host=localhost

  run:app:
    desc: Runs Snippetbox as a web application
    cmds:
      - go run ./cmd/web {{.CLI_ARGS}}

  run:tests:unit:
    desc: Runs only unit tests
    cmds:
      - go test -json -v --coverprofile=coverage.out ./... 2>&1 | gotestfmt -hide "successful-tests, empty-packages"

  run:smoketest:
    desc: Run the smoke test
    env:
      DB_USER: testuser
      DB_PASSWORD: pa$$word
      DB_NAME: testdb
      SNIPPETBOX_DB_DSN: postgresql://testuser:pa$$word@localhost:5432/testdb?sslmode=disable
    cmds:
      - defer: go run ./cmd/db teardown
      - go run ./cmd/db setup
      - migrate -path ./migrations -database $SNIPPETBOX_DB_DSN up
      - task: tls-cert:generate
      - ./smoke_test.sh

  run:tests:all:
    desc: Runs all tests
    env:
      INTEGRATION: true
    cmds:
      - go test -json -v --coverprofile=coverage.out ./... 2>&1 | gotestfmt -hide "successful-tests, empty-packages"
